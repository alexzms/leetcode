TODO: 
https://programmercarl.com/kamacoder/0044.%E5%BC%80%E5%8F%91%E5%95%86%E8%B4%AD%E4%B9%B0%E5%9C%9F%E5%9C%B0.html#%E6%80%9D%E8%B7%AF

# 数组处理方法总结

## 快慢指针 (Fast-Slow Cursor)
快慢指针是一种处理数组的有效技术，通常用于原地修改数组。在 `FastSlowCursor-RemoveVal.py` 中，我们使用快指针遍历数组，慢指针指向下一个有效元素应该存放的位置。这种方法可以高效地移除数组中的特定元素，而不需要额外的空间。
- 时间复杂度：O(n)
- 空间复杂度：O(1)

## 双指针 (Double Cursor)
双指针技术在 `DoubleCursor-SquareOfSortedArray.py` 中被用于处理已排序数组的平方问题。该方法有两种实现：
1. 分割数组为负数和非负数部分，然后使用类似归并排序的方式合并
2. 使用两个指针从数组两端向中间移动，比较元素平方大小

这种方法可以有效地处理已排序数组中的转换操作，保持结果的排序特性。
- 时间复杂度：O(n)
- 空间复杂度：O(n)

## 滑动窗口 (Sliding Window)
滑动窗口是一种在数组上移动的固定或可变大小的"窗口"。在 `SlidingWindow-MinLenSubSequence.py` 中，我们使用滑动窗口查找和大于等于目标值的最小长度子数组。窗口通过移动右边界扩大，移动左边界缩小，从而高效地找到满足条件的最优解。
- 时间复杂度：O(n)
- 空间复杂度：O(1)

## 矩阵螺旋遍历 (Spiral Matrix)
在 `MISC-SpiralMatrix.py` 中，我们使用方向控制和计数器来实现矩阵的螺旋遍历。这种技术需要精确地控制移动方向和转向时机，通常用于处理二维数组的特殊遍历模式。
- 时间复杂度：O(n²)
- 空间复杂度：O(n²)

## 前缀和 (Prefix Sum)
前缀和是一种预处理技术，通过计算数组中从开始到当前位置的所有元素之和，创建一个新的前缀和数组。这种方法可以快速计算任意区间的和，只需用两个前缀和的差值即可。前缀和技术常用于解决区间查询问题，如求子数组的和、寻找和为特定值的子数组等。
- 时间复杂度：预处理 O(n)，查询 O(1)
- 空间复杂度：O(n)

## 转换为链表问题 (Transform to Linked List)
在某些数组问题中，我们可以将数组转换为虚拟的链表结构来解决。在 `FloydCycleDetection-FindDuplicateNumberInArray.py` 中，我们将数组 [1,3,4,2,2] 转换为链表结构：0->1->3->2->4->2->...，其中每个索引 i 指向 nums[i]。这样就将查找重复数字转换为查找链表中的环的起点。这种转换使我们能够应用链表的算法（如 Floyd 环检测算法）来解决数组问题。
- 时间复杂度：O(n)
- 空间复杂度：O(1)
- 关键思路：
  1. 将数组索引视为节点
  2. 将数组值视为 next 指针
  3. 重复数字会在链表中形成环
  4. 环的起点即为重复数字

这些技术在处理数组问题时非常有用，可以根据具体问题选择适当的方法来提高效率和减少空间使用。